// Generated from java-escape by ANTLR 4.11.1
import Antlr4

internal class CherryLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = CherryLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(CherryLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	internal
	static let T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, 
            T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, 
            NL=16, WS=17, COMMENT=18, MULTILINE_COMMENT=19, INTEGER_LITERAL=20, 
            FLOATING_POINT_LITERAL=21, BOOLEAN_LITERAL=22, NIL_LITERAL=23, 
            STRING_LITERAL=24, MULTILINE_STRING_LITERAL=25, STRING_INTERPOLATION_START=26, 
            STRING_INTERPOLATION_CONTINUE=27, STRING_INTERPOLATION_FINISH=28, 
            MULTILINE_STRING_INTERPOLATION_START=29, MULTILINE_STRING_INTERPOLATION_CONTINUE=30, 
            MULTILINE_STRING_INTERPOLATION_FINISH=31, RAW_STRING_LITERAL=32, 
            RAW_MULTILINE_STRING_LITERAL=33, IDENTIFIER=34, IMPLICIT_PARAMETER_NAME=35, 
            LPAREN=36, RPAREN=37, DOT=38, LBRACE=39, RBRACE=40, OP=41

	internal
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	internal
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	internal
	static let ruleNames: [String] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "NL", "WS", "COMMENT", 
		"MULTILINE_COMMENT", "INTEGER_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
		"HEXADECIMAL_DIGITS", "FLOATING_POINT_LITERAL", "BOOLEAN_LITERAL", "NIL_LITERAL", 
		"STRING_LITERAL", "STRING_CONTENT", "ESC", "UNICODE", "HEX", "MULTILINE_STRING_LITERAL", 
		"MULTILINE_STRING_CONTENT", "STRING_INTERPOLATION_START", "STRING_INTERPOLATION_CONTINUE", 
		"STRING_INTERPOLATION_FINISH", "MULTILINE_STRING_INTERPOLATION_START", 
		"MULTILINE_STRING_INTERPOLATION_CONTINUE", "MULTILINE_STRING_INTERPOLATION_FINISH", 
		"RAW_STRING_LITERAL", "RAW_MULTILINE_STRING_LITERAL", "IDENTIFIER", "IDENTIFIER_HEAD", 
		"IDENTIFIER_CHARACTER", "IMPLICIT_PARAMETER_NAME", "LPAREN", "RPAREN", 
		"DOT", "LBRACE", "RBRACE", "OP", "OP_HEAD", "OP_CHARACTER", "DOT_OP_CHARACTER"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "'-'", "','", "'higherThan'", "'lowerThan'", "'assignment'", "'associativity'", 
		"'left'", "'right'", "'none'", "'var'", "';'", "'func'", "'class'", "'precedencegroup'", 
		"':'", nil, nil, nil, nil, nil, nil, nil, "'nil'", nil, nil, nil, nil, 
		nil, nil, nil, nil, nil, nil, nil, nil, "'('", "')'", "'.'", "'{'", "'}'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 
		nil, nil, "NL", "WS", "COMMENT", "MULTILINE_COMMENT", "INTEGER_LITERAL", 
		"FLOATING_POINT_LITERAL", "BOOLEAN_LITERAL", "NIL_LITERAL", "STRING_LITERAL", 
		"MULTILINE_STRING_LITERAL", "STRING_INTERPOLATION_START", "STRING_INTERPOLATION_CONTINUE", 
		"STRING_INTERPOLATION_FINISH", "MULTILINE_STRING_INTERPOLATION_START", 
		"MULTILINE_STRING_INTERPOLATION_CONTINUE", "MULTILINE_STRING_INTERPOLATION_FINISH", 
		"RAW_STRING_LITERAL", "RAW_MULTILINE_STRING_LITERAL", "IDENTIFIER", "IMPLICIT_PARAMETER_NAME", 
		"LPAREN", "RPAREN", "DOT", "LBRACE", "RBRACE", "OP"
	]
	internal
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	    private var stringInterpolations: [Int] = []
	    private var bracketDepth: Int = 0
	    
	    private func canResumeInterpolation() -> Bool {
	        stringInterpolations.last == bracketDepth
	    }
	    
	    private func reportCustomError(_ msg: String) {
	        let charPositionInLine = getInterpreter().getCharPositionInLine()
	        let line = getInterpreter().getLine()
	            
	        let listener = getErrorListenerDispatch()
	        listener.syntaxError(self, nil, line, charPositionInLine, msg, nil)
	    }


	override internal
	func getVocabulary() -> Vocabulary {
		return CherryLexer.VOCABULARY
	}

	internal
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, CherryLexer._ATN, CherryLexer._decisionToDFA, CherryLexer._sharedContextCache)
	}

	override internal
	func getGrammarFileName() -> String { return "Cherry.g4" }

	override internal
	func getRuleNames() -> [String] { return CherryLexer.ruleNames }

	override internal
	func getSerializedATN() -> [Int] { return CherryLexer._serializedATN }

	override internal
	func getChannelNames() -> [String] { return CherryLexer.channelNames }

	override internal
	func getModeNames() -> [String] { return CherryLexer.modeNames }

	override internal
	func getATN() -> ATN { return CherryLexer._ATN }

	override open
	func action(_ _localctx: RuleContext?,  _ ruleIndex: Int, _ actionIndex: Int) throws {
		switch (ruleIndex) {
		case 23:
			FLOATING_POINT_LITERAL_action((_localctx as RuleContext?), actionIndex)

		case 33:
			STRING_INTERPOLATION_START_action((_localctx as RuleContext?), actionIndex)

		case 35:
			STRING_INTERPOLATION_FINISH_action((_localctx as RuleContext?), actionIndex)

		case 36:
			MULTILINE_STRING_INTERPOLATION_START_action((_localctx as RuleContext?), actionIndex)

		case 38:
			MULTILINE_STRING_INTERPOLATION_FINISH_action((_localctx as RuleContext?), actionIndex)

		case 48:
			LBRACE_action((_localctx as RuleContext?), actionIndex)

		case 49:
			RBRACE_action((_localctx as RuleContext?), actionIndex)

		default: break
		}
	}
	private func FLOATING_POINT_LITERAL_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 0:
			 reportCustomError("hexadecimal floating point literal must end with an exponent") 

		 default: break
		}
	}
	private func STRING_INTERPOLATION_START_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 1:
			 stringInterpolations.append(bracketDepth) 

		 default: break
		}
	}
	private func STRING_INTERPOLATION_FINISH_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 2:
			 stringInterpolations.removeLast() 

		 default: break
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_START_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 3:
			 stringInterpolations.append(bracketDepth) 

		 default: break
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_FINISH_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 4:
			 stringInterpolations.removeLast() 

		 default: break
		}
	}
	private func LBRACE_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 5:
			 bracketDepth += 1 

		 default: break
		}
	}
	private func RBRACE_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 6:
			 bracketDepth -= 1 

		 default: break
		}
	}
	override open
	func sempred(_ _localctx: RuleContext?, _  ruleIndex: Int,_   predIndex: Int) throws -> Bool {
		switch (ruleIndex) {
		case 34:
			return try STRING_INTERPOLATION_CONTINUE_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		case 35:
			return try STRING_INTERPOLATION_FINISH_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		case 37:
			return try MULTILINE_STRING_INTERPOLATION_CONTINUE_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		case 38:
			return try MULTILINE_STRING_INTERPOLATION_FINISH_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		default: return true
		}
	}
	private func STRING_INTERPOLATION_CONTINUE_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 0:return  canResumeInterpolation() 
		    default: return true
		}
	}
	private func STRING_INTERPOLATION_FINISH_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 1:return  canResumeInterpolation() 
		    default: return true
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_CONTINUE_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 2:return  canResumeInterpolation() 
		    default: return true
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_FINISH_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 3:return  canResumeInterpolation() 
		    default: return true
		}
	}

	static let _serializedATN:[Int] = [
		4,0,41,558,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,
		11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,3,15,212,
		8,15,1,15,1,15,3,15,216,8,15,1,16,4,16,219,8,16,11,16,12,16,220,1,16,1,
		16,1,17,1,17,1,17,1,17,5,17,229,8,17,10,17,12,17,232,9,17,1,17,1,17,1,
		18,1,18,1,18,1,18,5,18,240,8,18,10,18,12,18,243,9,18,1,18,1,18,1,18,1,
		18,1,18,1,19,1,19,1,19,1,19,1,19,5,19,255,8,19,10,19,12,19,258,9,19,1,
		19,1,19,1,19,1,19,1,19,5,19,265,8,19,10,19,12,19,268,9,19,1,19,1,19,3,
		19,272,8,19,1,20,1,20,5,20,276,8,20,10,20,12,20,279,9,20,1,21,1,21,1,21,
		1,21,1,21,1,22,1,22,5,22,288,8,22,10,22,12,22,291,9,22,1,23,1,23,1,23,
		3,23,296,8,23,1,23,1,23,3,23,300,8,23,1,23,3,23,303,8,23,1,23,1,23,1,23,
		3,23,308,8,23,1,23,1,23,3,23,312,8,23,1,23,1,23,1,23,1,23,1,23,1,23,3,
		23,320,8,23,3,23,322,8,23,1,23,1,23,3,23,326,8,23,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,3,24,337,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,
		26,1,26,1,27,1,27,5,27,349,8,27,10,27,12,27,352,9,27,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,3,28,361,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		4,29,371,8,29,11,29,12,29,372,1,29,1,29,3,29,377,8,29,1,30,1,30,1,31,1,
		31,1,31,1,31,1,31,3,31,386,8,31,1,31,1,31,1,31,1,31,3,31,392,8,31,1,31,
		1,31,1,31,1,31,1,32,1,32,5,32,400,8,32,10,32,12,32,403,9,32,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
		1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
		1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,39,1,39,1,39,1,39,5,39,453,8,39,10,39,12,39,456,9,39,1,39,3,39,459,8,
		39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,470,8,40,1,40,1,40,
		5,40,474,8,40,10,40,12,40,477,9,40,1,40,1,40,3,40,481,8,40,1,40,1,40,1,
		40,1,40,3,40,487,8,40,1,40,1,40,1,41,1,41,5,41,493,8,41,10,41,12,41,496,
		9,41,1,41,1,41,1,41,5,41,501,8,41,10,41,12,41,504,9,41,1,41,1,41,3,41,
		508,8,41,1,42,1,42,1,43,1,43,3,43,514,8,43,1,44,1,44,4,44,518,8,44,11,
		44,12,44,519,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,
		49,1,50,1,50,5,50,536,8,50,10,50,12,50,539,9,50,1,50,1,50,4,50,543,8,50,
		11,50,12,50,544,3,50,547,8,50,1,51,1,51,1,52,1,52,3,52,553,8,52,1,53,1,
		53,3,53,557,8,53,4,241,401,454,475,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,0,43,0,45,0,47,21,49,22,51,23,53,24,55,0,57,0,59,0,61,0,63,25,
		65,0,67,26,69,27,71,28,73,29,75,30,77,31,79,32,81,33,83,34,85,0,87,0,89,
		35,91,36,93,37,95,38,97,39,99,40,101,41,103,0,105,0,107,0,1,0,21,3,0,9,
		9,11,12,32,32,1,0,10,10,1,0,48,49,2,0,48,49,95,95,1,0,48,55,2,0,48,55,
		95,95,1,0,48,57,2,0,48,57,95,95,3,0,48,57,65,70,97,102,4,0,48,57,65,70,
		95,95,97,102,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,112,112,4,0,10,
		10,13,13,34,34,92,92,8,0,34,34,47,48,92,92,98,98,102,102,110,110,114,114,
		116,116,1,0,92,92,2,0,10,10,13,13,49,0,65,90,95,95,97,122,168,168,170,
		170,173,173,175,175,178,181,183,186,188,190,192,214,216,246,248,767,880,
		5759,5761,6157,6159,7615,7680,8191,8203,8205,8234,8238,8255,8256,8276,
		8276,8288,8399,8448,8591,9312,9471,10102,10131,11264,11775,11904,12287,
		12292,12295,12321,12335,12337,55295,63744,64829,64832,64975,65008,65055,
		65072,65092,65095,65533,65536,131069,131072,196605,196608,262141,262144,
		327677,327680,393213,393216,458749,458752,524285,524288,589821,589824,
		655357,655360,720893,720896,786429,786432,851965,851968,917501,917504,
		983037,5,0,48,57,768,879,7616,7679,8400,8447,65056,65071,31,0,33,33,37,
		38,42,43,45,45,47,47,60,63,94,94,124,124,126,126,161,167,169,169,171,172,
		174,174,176,177,182,182,187,187,191,191,215,215,247,247,8214,8215,8224,
		8231,8240,8254,8257,8275,8277,8286,8592,9215,9472,10101,10132,11263,11776,
		11903,12289,12291,12296,12320,12336,12336,6,0,768,879,7616,7679,8400,8447,
		65024,65039,65056,65071,917760,917999,592,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,63,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,89,1,0,0,0,0,91,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
		0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,124,1,0,0,0,9,134,1,0,
		0,0,11,145,1,0,0,0,13,159,1,0,0,0,15,164,1,0,0,0,17,170,1,0,0,0,19,175,
		1,0,0,0,21,179,1,0,0,0,23,181,1,0,0,0,25,186,1,0,0,0,27,192,1,0,0,0,29,
		208,1,0,0,0,31,215,1,0,0,0,33,218,1,0,0,0,35,224,1,0,0,0,37,235,1,0,0,
		0,39,271,1,0,0,0,41,273,1,0,0,0,43,280,1,0,0,0,45,285,1,0,0,0,47,325,1,
		0,0,0,49,336,1,0,0,0,51,338,1,0,0,0,53,342,1,0,0,0,55,350,1,0,0,0,57,353,
		1,0,0,0,59,362,1,0,0,0,61,378,1,0,0,0,63,380,1,0,0,0,65,401,1,0,0,0,67,
		404,1,0,0,0,69,411,1,0,0,0,71,417,1,0,0,0,73,423,1,0,0,0,75,433,1,0,0,
		0,77,439,1,0,0,0,79,448,1,0,0,0,81,462,1,0,0,0,83,507,1,0,0,0,85,509,1,
		0,0,0,87,513,1,0,0,0,89,515,1,0,0,0,91,521,1,0,0,0,93,523,1,0,0,0,95,525,
		1,0,0,0,97,527,1,0,0,0,99,530,1,0,0,0,101,546,1,0,0,0,103,548,1,0,0,0,
		105,552,1,0,0,0,107,556,1,0,0,0,109,110,5,45,0,0,110,2,1,0,0,0,111,112,
		5,44,0,0,112,4,1,0,0,0,113,114,5,104,0,0,114,115,5,105,0,0,115,116,5,103,
		0,0,116,117,5,104,0,0,117,118,5,101,0,0,118,119,5,114,0,0,119,120,5,84,
		0,0,120,121,5,104,0,0,121,122,5,97,0,0,122,123,5,110,0,0,123,6,1,0,0,0,
		124,125,5,108,0,0,125,126,5,111,0,0,126,127,5,119,0,0,127,128,5,101,0,
		0,128,129,5,114,0,0,129,130,5,84,0,0,130,131,5,104,0,0,131,132,5,97,0,
		0,132,133,5,110,0,0,133,8,1,0,0,0,134,135,5,97,0,0,135,136,5,115,0,0,136,
		137,5,115,0,0,137,138,5,105,0,0,138,139,5,103,0,0,139,140,5,110,0,0,140,
		141,5,109,0,0,141,142,5,101,0,0,142,143,5,110,0,0,143,144,5,116,0,0,144,
		10,1,0,0,0,145,146,5,97,0,0,146,147,5,115,0,0,147,148,5,115,0,0,148,149,
		5,111,0,0,149,150,5,99,0,0,150,151,5,105,0,0,151,152,5,97,0,0,152,153,
		5,116,0,0,153,154,5,105,0,0,154,155,5,118,0,0,155,156,5,105,0,0,156,157,
		5,116,0,0,157,158,5,121,0,0,158,12,1,0,0,0,159,160,5,108,0,0,160,161,5,
		101,0,0,161,162,5,102,0,0,162,163,5,116,0,0,163,14,1,0,0,0,164,165,5,114,
		0,0,165,166,5,105,0,0,166,167,5,103,0,0,167,168,5,104,0,0,168,169,5,116,
		0,0,169,16,1,0,0,0,170,171,5,110,0,0,171,172,5,111,0,0,172,173,5,110,0,
		0,173,174,5,101,0,0,174,18,1,0,0,0,175,176,5,118,0,0,176,177,5,97,0,0,
		177,178,5,114,0,0,178,20,1,0,0,0,179,180,5,59,0,0,180,22,1,0,0,0,181,182,
		5,102,0,0,182,183,5,117,0,0,183,184,5,110,0,0,184,185,5,99,0,0,185,24,
		1,0,0,0,186,187,5,99,0,0,187,188,5,108,0,0,188,189,5,97,0,0,189,190,5,
		115,0,0,190,191,5,115,0,0,191,26,1,0,0,0,192,193,5,112,0,0,193,194,5,114,
		0,0,194,195,5,101,0,0,195,196,5,99,0,0,196,197,5,101,0,0,197,198,5,100,
		0,0,198,199,5,101,0,0,199,200,5,110,0,0,200,201,5,99,0,0,201,202,5,101,
		0,0,202,203,5,103,0,0,203,204,5,114,0,0,204,205,5,111,0,0,205,206,5,117,
		0,0,206,207,5,112,0,0,207,28,1,0,0,0,208,209,5,58,0,0,209,30,1,0,0,0,210,
		212,5,13,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,216,5,
		10,0,0,214,216,5,13,0,0,215,211,1,0,0,0,215,214,1,0,0,0,216,32,1,0,0,0,
		217,219,7,0,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,
		1,0,0,0,221,222,1,0,0,0,222,223,6,16,0,0,223,34,1,0,0,0,224,225,5,47,0,
		0,225,226,5,47,0,0,226,230,1,0,0,0,227,229,8,1,0,0,228,227,1,0,0,0,229,
		232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,230,1,
		0,0,0,233,234,6,17,0,0,234,36,1,0,0,0,235,236,5,47,0,0,236,237,5,42,0,
		0,237,241,1,0,0,0,238,240,9,0,0,0,239,238,1,0,0,0,240,243,1,0,0,0,241,
		242,1,0,0,0,241,239,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,245,5,
		42,0,0,245,246,5,47,0,0,246,247,1,0,0,0,247,248,6,18,0,0,248,38,1,0,0,
		0,249,250,5,48,0,0,250,251,5,98,0,0,251,252,1,0,0,0,252,256,7,2,0,0,253,
		255,7,3,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,
		0,0,0,257,272,1,0,0,0,258,256,1,0,0,0,259,260,5,48,0,0,260,261,5,111,0,
		0,261,262,1,0,0,0,262,266,7,4,0,0,263,265,7,5,0,0,264,263,1,0,0,0,265,
		268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,272,1,0,0,0,268,266,1,
		0,0,0,269,272,3,41,20,0,270,272,3,43,21,0,271,249,1,0,0,0,271,259,1,0,
		0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,40,1,0,0,0,273,277,7,6,0,0,274,
		276,7,7,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,
		0,0,0,278,42,1,0,0,0,279,277,1,0,0,0,280,281,5,48,0,0,281,282,5,120,0,
		0,282,283,1,0,0,0,283,284,3,45,22,0,284,44,1,0,0,0,285,289,7,8,0,0,286,
		288,7,9,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,
		0,0,0,290,46,1,0,0,0,291,289,1,0,0,0,292,295,3,41,20,0,293,294,5,46,0,
		0,294,296,3,41,20,0,295,293,1,0,0,0,295,296,1,0,0,0,296,302,1,0,0,0,297,
		299,7,10,0,0,298,300,7,11,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,
		1,0,0,0,301,303,3,41,20,0,302,297,1,0,0,0,302,303,1,0,0,0,303,326,1,0,
		0,0,304,307,3,43,21,0,305,306,5,46,0,0,306,308,3,45,22,0,307,305,1,0,0,
		0,307,308,1,0,0,0,308,309,1,0,0,0,309,311,7,12,0,0,310,312,7,11,0,0,311,
		310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,3,41,20,0,314,326,
		1,0,0,0,315,321,3,43,21,0,316,317,5,46,0,0,317,319,7,6,0,0,318,320,3,45,
		22,0,319,318,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,316,1,0,0,0,321,
		322,1,0,0,0,322,323,1,0,0,0,323,324,6,23,1,0,324,326,1,0,0,0,325,292,1,
		0,0,0,325,304,1,0,0,0,325,315,1,0,0,0,326,48,1,0,0,0,327,328,5,116,0,0,
		328,329,5,114,0,0,329,330,5,117,0,0,330,337,5,101,0,0,331,332,5,102,0,
		0,332,333,5,97,0,0,333,334,5,108,0,0,334,335,5,115,0,0,335,337,5,101,0,
		0,336,327,1,0,0,0,336,331,1,0,0,0,337,50,1,0,0,0,338,339,5,110,0,0,339,
		340,5,105,0,0,340,341,5,108,0,0,341,52,1,0,0,0,342,343,5,34,0,0,343,344,
		3,55,27,0,344,345,5,34,0,0,345,54,1,0,0,0,346,349,3,57,28,0,347,349,8,
		13,0,0,348,346,1,0,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,
		350,351,1,0,0,0,351,56,1,0,0,0,352,350,1,0,0,0,353,360,5,92,0,0,354,361,
		7,14,0,0,355,361,3,59,29,0,356,357,5,120,0,0,357,358,3,61,30,0,358,359,
		3,61,30,0,359,361,1,0,0,0,360,354,1,0,0,0,360,355,1,0,0,0,360,356,1,0,
		0,0,361,58,1,0,0,0,362,376,5,117,0,0,363,364,3,61,30,0,364,365,3,61,30,
		0,365,366,3,61,30,0,366,367,3,61,30,0,367,377,1,0,0,0,368,370,5,123,0,
		0,369,371,3,61,30,0,370,369,1,0,0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,
		373,1,0,0,0,373,374,1,0,0,0,374,375,5,125,0,0,375,377,1,0,0,0,376,363,
		1,0,0,0,376,368,1,0,0,0,377,60,1,0,0,0,378,379,7,8,0,0,379,62,1,0,0,0,
		380,381,5,34,0,0,381,382,5,34,0,0,382,383,5,34,0,0,383,385,1,0,0,0,384,
		386,3,33,16,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,
		3,31,15,0,388,389,3,65,32,0,389,391,3,31,15,0,390,392,3,33,16,0,391,390,
		1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,5,34,0,0,394,395,5,34,
		0,0,395,396,5,34,0,0,396,64,1,0,0,0,397,400,3,57,28,0,398,400,8,15,0,0,
		399,397,1,0,0,0,399,398,1,0,0,0,400,403,1,0,0,0,401,402,1,0,0,0,401,399,
		1,0,0,0,402,66,1,0,0,0,403,401,1,0,0,0,404,405,5,34,0,0,405,406,3,55,27,
		0,406,407,5,92,0,0,407,408,5,123,0,0,408,409,1,0,0,0,409,410,6,33,2,0,
		410,68,1,0,0,0,411,412,5,125,0,0,412,413,4,34,0,0,413,414,3,55,27,0,414,
		415,5,92,0,0,415,416,5,123,0,0,416,70,1,0,0,0,417,418,5,125,0,0,418,419,
		4,35,1,0,419,420,3,55,27,0,420,421,5,34,0,0,421,422,6,35,3,0,422,72,1,
		0,0,0,423,424,5,34,0,0,424,425,5,34,0,0,425,426,5,34,0,0,426,427,1,0,0,
		0,427,428,3,65,32,0,428,429,5,92,0,0,429,430,5,123,0,0,430,431,1,0,0,0,
		431,432,6,36,4,0,432,74,1,0,0,0,433,434,5,125,0,0,434,435,4,37,2,0,435,
		436,3,65,32,0,436,437,5,92,0,0,437,438,5,123,0,0,438,76,1,0,0,0,439,440,
		5,125,0,0,440,441,4,38,3,0,441,442,3,65,32,0,442,443,5,34,0,0,443,444,
		5,34,0,0,444,445,5,34,0,0,445,446,1,0,0,0,446,447,6,38,5,0,447,78,1,0,
		0,0,448,458,5,35,0,0,449,459,3,79,39,0,450,454,5,34,0,0,451,453,8,16,0,
		0,452,451,1,0,0,0,453,456,1,0,0,0,454,455,1,0,0,0,454,452,1,0,0,0,455,
		457,1,0,0,0,456,454,1,0,0,0,457,459,5,34,0,0,458,449,1,0,0,0,458,450,1,
		0,0,0,459,460,1,0,0,0,460,461,5,35,0,0,461,80,1,0,0,0,462,486,5,35,0,0,
		463,487,3,81,40,0,464,465,5,34,0,0,465,466,5,34,0,0,466,467,5,34,0,0,467,
		469,1,0,0,0,468,470,3,33,16,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,
		1,0,0,0,471,475,3,31,15,0,472,474,9,0,0,0,473,472,1,0,0,0,474,477,1,0,
		0,0,475,476,1,0,0,0,475,473,1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,
		480,3,31,15,0,479,481,3,33,16,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,
		1,0,0,0,482,483,5,34,0,0,483,484,5,34,0,0,484,485,5,34,0,0,485,487,1,0,
		0,0,486,463,1,0,0,0,486,464,1,0,0,0,487,488,1,0,0,0,488,489,5,35,0,0,489,
		82,1,0,0,0,490,494,3,85,42,0,491,493,3,87,43,0,492,491,1,0,0,0,493,496,
		1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,508,1,0,0,0,496,494,1,0,0,
		0,497,498,5,96,0,0,498,502,3,85,42,0,499,501,3,87,43,0,500,499,1,0,0,0,
		501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,502,
		1,0,0,0,505,506,5,96,0,0,506,508,1,0,0,0,507,490,1,0,0,0,507,497,1,0,0,
		0,508,84,1,0,0,0,509,510,7,17,0,0,510,86,1,0,0,0,511,514,7,18,0,0,512,
		514,3,85,42,0,513,511,1,0,0,0,513,512,1,0,0,0,514,88,1,0,0,0,515,517,5,
		36,0,0,516,518,7,6,0,0,517,516,1,0,0,0,518,519,1,0,0,0,519,517,1,0,0,0,
		519,520,1,0,0,0,520,90,1,0,0,0,521,522,5,40,0,0,522,92,1,0,0,0,523,524,
		5,41,0,0,524,94,1,0,0,0,525,526,5,46,0,0,526,96,1,0,0,0,527,528,5,123,
		0,0,528,529,6,48,6,0,529,98,1,0,0,0,530,531,5,125,0,0,531,532,6,49,7,0,
		532,100,1,0,0,0,533,537,3,103,51,0,534,536,3,105,52,0,535,534,1,0,0,0,
		536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,547,1,0,0,0,539,537,
		1,0,0,0,540,542,5,46,0,0,541,543,3,107,53,0,542,541,1,0,0,0,543,544,1,
		0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,533,1,0,0,0,
		546,540,1,0,0,0,547,102,1,0,0,0,548,549,7,19,0,0,549,104,1,0,0,0,550,553,
		3,103,51,0,551,553,7,20,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,106,1,
		0,0,0,554,557,5,46,0,0,555,557,3,105,52,0,556,554,1,0,0,0,556,555,1,0,
		0,0,557,108,1,0,0,0,45,0,211,215,220,230,241,256,266,271,277,289,295,299,
		302,307,311,319,321,325,336,348,350,360,372,376,385,391,399,401,454,458,
		469,475,480,486,494,502,507,513,519,537,544,546,552,556,8,6,0,0,1,23,0,
		1,33,1,1,35,2,1,36,3,1,38,4,1,48,5,1,49,6
	]

	internal
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}