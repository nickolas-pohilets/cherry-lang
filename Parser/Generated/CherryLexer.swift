// Generated from java-escape by ANTLR 4.11.1
import Antlr4

internal class CherryLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = CherryLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(CherryLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	internal
	static let T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, 
            T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, 
            NL=16, WS=17, COMMENT=18, MULTILINE_COMMENT=19, IDENTIFIER=20, 
            IMPLICIT_PARAMETER_NAME=21, INTEGER_LITERAL=22, FLOATING_POINT_LITERAL=23, 
            BOOLEAN_LITERAL=24, NIL_LITERAL=25, STRING_LITERAL=26, MULTILINE_STRING_LITERAL=27, 
            STRING_INTERPOLATION_START=28, STRING_INTERPOLATION_CONTINUE=29, 
            STRING_INTERPOLATION_FINISH=30, MULTILINE_STRING_INTERPOLATION_START=31, 
            MULTILINE_STRING_INTERPOLATION_CONTINUE=32, MULTILINE_STRING_INTERPOLATION_FINISH=33, 
            RAW_STRING_LITERAL=34, RAW_MULTILINE_STRING_LITERAL=35, LPAREN=36, 
            RPAREN=37, LBRACE=38, RBRACE=39, OP=40

	internal
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	internal
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	internal
	static let ruleNames: [String] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "NL", "WS", "COMMENT", 
		"MULTILINE_COMMENT", "IDENTIFIER", "IDENTIFIER_HEAD", "IDENTIFIER_CHARACTER", 
		"IMPLICIT_PARAMETER_NAME", "INTEGER_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
		"HEXADECIMAL_DIGITS", "FLOATING_POINT_LITERAL", "BOOLEAN_LITERAL", "NIL_LITERAL", 
		"STRING_LITERAL", "STRING_CONTENT", "ESC", "UNICODE", "HEX", "MULTILINE_STRING_LITERAL", 
		"MULTILINE_STRING_CONTENT", "STRING_INTERPOLATION_START", "STRING_INTERPOLATION_CONTINUE", 
		"STRING_INTERPOLATION_FINISH", "MULTILINE_STRING_INTERPOLATION_START", 
		"MULTILINE_STRING_INTERPOLATION_CONTINUE", "MULTILINE_STRING_INTERPOLATION_FINISH", 
		"RAW_STRING_LITERAL", "RAW_MULTILINE_STRING_LITERAL", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "OP", "OP_HEAD", "OP_CHARACTER", "DOT_OP_CHARACTER"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "','", "'higherThan'", "'lowerThan'", "'assignment'", "'associativity'", 
		"'left'", "'right'", "'none'", "'-'", "'var'", "';'", "'func'", "'class'", 
		"'precedencegroup'", "':'", nil, nil, nil, nil, nil, nil, nil, nil, nil, 
		"'nil'", nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, "'('", "')'", 
		"'{'", "'}'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 
		nil, nil, "NL", "WS", "COMMENT", "MULTILINE_COMMENT", "IDENTIFIER", "IMPLICIT_PARAMETER_NAME", 
		"INTEGER_LITERAL", "FLOATING_POINT_LITERAL", "BOOLEAN_LITERAL", "NIL_LITERAL", 
		"STRING_LITERAL", "MULTILINE_STRING_LITERAL", "STRING_INTERPOLATION_START", 
		"STRING_INTERPOLATION_CONTINUE", "STRING_INTERPOLATION_FINISH", "MULTILINE_STRING_INTERPOLATION_START", 
		"MULTILINE_STRING_INTERPOLATION_CONTINUE", "MULTILINE_STRING_INTERPOLATION_FINISH", 
		"RAW_STRING_LITERAL", "RAW_MULTILINE_STRING_LITERAL", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "OP"
	]
	internal
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	    private var stringInterpolations: [Int] = []
	    private var bracketDepth: Int = 0
	    
	    private func canResumeInterpolation() -> Bool {
	        stringInterpolations.last == bracketDepth
	    }
	    
	    private func reportCustomError(_ msg: String) {
	        let charPositionInLine = getInterpreter().getCharPositionInLine()
	        let line = getInterpreter().getLine()
	            
	        let listener = getErrorListenerDispatch()
	        listener.syntaxError(self, nil, line, charPositionInLine, msg, nil)
	    }


	override internal
	func getVocabulary() -> Vocabulary {
		return CherryLexer.VOCABULARY
	}

	internal
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, CherryLexer._ATN, CherryLexer._decisionToDFA, CherryLexer._sharedContextCache)
	}

	override internal
	func getGrammarFileName() -> String { return "Cherry.g4" }

	override internal
	func getRuleNames() -> [String] { return CherryLexer.ruleNames }

	override internal
	func getSerializedATN() -> [Int] { return CherryLexer._serializedATN }

	override internal
	func getChannelNames() -> [String] { return CherryLexer.channelNames }

	override internal
	func getModeNames() -> [String] { return CherryLexer.modeNames }

	override internal
	func getATN() -> ATN { return CherryLexer._ATN }

	override open
	func action(_ _localctx: RuleContext?,  _ ruleIndex: Int, _ actionIndex: Int) throws {
		switch (ruleIndex) {
		case 27:
			FLOATING_POINT_LITERAL_action((_localctx as RuleContext?), actionIndex)

		case 37:
			STRING_INTERPOLATION_START_action((_localctx as RuleContext?), actionIndex)

		case 39:
			STRING_INTERPOLATION_FINISH_action((_localctx as RuleContext?), actionIndex)

		case 40:
			MULTILINE_STRING_INTERPOLATION_START_action((_localctx as RuleContext?), actionIndex)

		case 42:
			MULTILINE_STRING_INTERPOLATION_FINISH_action((_localctx as RuleContext?), actionIndex)

		case 47:
			LBRACE_action((_localctx as RuleContext?), actionIndex)

		case 48:
			RBRACE_action((_localctx as RuleContext?), actionIndex)

		default: break
		}
	}
	private func FLOATING_POINT_LITERAL_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 0:
			 reportCustomError("Hexadecimal floating point literal must end with an exponent") 

		 default: break
		}
	}
	private func STRING_INTERPOLATION_START_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 1:
			 stringInterpolations.append(bracketDepth) 

		 default: break
		}
	}
	private func STRING_INTERPOLATION_FINISH_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 2:
			 stringInterpolations.removeLast() 

		 default: break
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_START_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 3:
			 stringInterpolations.append(bracketDepth) 

		 default: break
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_FINISH_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 4:
			 stringInterpolations.removeLast() 

		 default: break
		}
	}
	private func LBRACE_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 5:
			 bracketDepth += 1 

		 default: break
		}
	}
	private func RBRACE_action(_ _localctx: RuleContext?,  _ actionIndex: Int) {
		switch (actionIndex) {
		case 6:
			 bracketDepth -= 1 

		 default: break
		}
	}
	override open
	func sempred(_ _localctx: RuleContext?, _  ruleIndex: Int,_   predIndex: Int) throws -> Bool {
		switch (ruleIndex) {
		case 38:
			return try STRING_INTERPOLATION_CONTINUE_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		case 39:
			return try STRING_INTERPOLATION_FINISH_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		case 41:
			return try MULTILINE_STRING_INTERPOLATION_CONTINUE_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		case 42:
			return try MULTILINE_STRING_INTERPOLATION_FINISH_sempred(_localctx?.castdown(RuleContext.self), predIndex)
		default: return true
		}
	}
	private func STRING_INTERPOLATION_CONTINUE_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 0:return  canResumeInterpolation() 
		    default: return true
		}
	}
	private func STRING_INTERPOLATION_FINISH_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 1:return  canResumeInterpolation() 
		    default: return true
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_CONTINUE_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 2:return  canResumeInterpolation() 
		    default: return true
		}
	}
	private func MULTILINE_STRING_INTERPOLATION_FINISH_sempred(_ _localctx: RuleContext!,  _ predIndex: Int) throws -> Bool {
		switch (predIndex) {
		    case 3:return  canResumeInterpolation() 
		    default: return true
		}
	}

	static let _serializedATN:[Int] = [
		4,0,40,554,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
		7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,3,15,210,8,15,1,15,
		1,15,3,15,214,8,15,1,16,4,16,217,8,16,11,16,12,16,218,1,16,1,16,1,17,1,
		17,1,17,1,17,5,17,227,8,17,10,17,12,17,230,9,17,1,17,1,17,1,18,1,18,1,
		18,1,18,5,18,238,8,18,10,18,12,18,241,9,18,1,18,1,18,1,18,1,18,1,18,1,
		19,1,19,5,19,250,8,19,10,19,12,19,253,9,19,1,19,1,19,1,19,5,19,258,8,19,
		10,19,12,19,261,9,19,1,19,1,19,3,19,265,8,19,1,20,1,20,1,21,1,21,3,21,
		271,8,21,1,22,1,22,4,22,275,8,22,11,22,12,22,276,1,23,1,23,1,23,1,23,1,
		23,5,23,284,8,23,10,23,12,23,287,9,23,1,23,1,23,1,23,1,23,1,23,5,23,294,
		8,23,10,23,12,23,297,9,23,1,23,1,23,3,23,301,8,23,1,24,1,24,5,24,305,8,
		24,10,24,12,24,308,9,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,5,26,317,8,
		26,10,26,12,26,320,9,26,1,27,1,27,1,27,3,27,325,8,27,1,27,1,27,3,27,329,
		8,27,1,27,3,27,332,8,27,1,27,1,27,1,27,3,27,337,8,27,1,27,1,27,3,27,341,
		8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,349,8,27,3,27,351,8,27,1,27,1,
		27,3,27,355,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,366,
		8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,5,31,378,8,31,10,
		31,12,31,381,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,390,8,32,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,4,33,400,8,33,11,33,12,33,401,1,33,
		1,33,3,33,406,8,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,3,35,415,8,35,1,
		35,1,35,1,35,1,35,3,35,421,8,35,1,35,1,35,1,35,1,35,1,36,1,36,5,36,429,
		8,36,10,36,12,36,432,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,
		1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,482,8,43,10,
		43,12,43,485,9,43,1,43,3,43,488,8,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,3,44,499,8,44,1,44,1,44,5,44,503,8,44,10,44,12,44,506,9,44,1,
		44,1,44,3,44,510,8,44,1,44,1,44,1,44,1,44,3,44,516,8,44,1,44,1,44,1,45,
		1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,5,49,532,8,49,10,
		49,12,49,535,9,49,1,49,1,49,4,49,539,8,49,11,49,12,49,540,3,49,543,8,49,
		1,50,1,50,1,51,1,51,3,51,549,8,51,1,52,1,52,3,52,553,8,52,4,239,430,483,
		504,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,0,43,0,45,21,47,22,49,
		0,51,0,53,0,55,23,57,24,59,25,61,26,63,0,65,0,67,0,69,0,71,27,73,0,75,
		28,77,29,79,30,81,31,83,32,85,33,87,34,89,35,91,36,93,37,95,38,97,39,99,
		40,101,0,103,0,105,0,1,0,21,3,0,9,9,11,12,32,32,1,0,10,10,49,0,65,90,95,
		95,97,122,168,168,170,170,173,173,175,175,178,181,183,186,188,190,192,
		214,216,246,248,767,880,5759,5761,6157,6159,7615,7680,8191,8203,8205,8234,
		8238,8255,8256,8276,8276,8288,8399,8448,8591,9312,9471,10102,10131,11264,
		11775,11904,12287,12292,12295,12321,12335,12337,55295,63744,64829,64832,
		64975,65008,65055,65072,65092,65095,65533,65536,131069,131072,196605,196608,
		262141,262144,327677,327680,393213,393216,458749,458752,524285,524288,
		589821,589824,655357,655360,720893,720896,786429,786432,851965,851968,
		917501,917504,983037,5,0,48,57,768,879,7616,7679,8400,8447,65056,65071,
		1,0,48,57,1,0,48,49,2,0,48,49,95,95,1,0,48,55,2,0,48,55,95,95,2,0,48,57,
		95,95,3,0,48,57,65,70,97,102,4,0,48,57,65,70,95,95,97,102,2,0,69,69,101,
		101,2,0,43,43,45,45,2,0,80,80,112,112,4,0,10,10,13,13,34,34,92,92,8,0,
		34,34,47,48,92,92,98,98,102,102,110,110,114,114,116,116,1,0,92,92,2,0,
		10,10,13,13,31,0,33,33,37,38,42,43,45,45,47,47,60,63,94,94,124,124,126,
		126,161,167,169,169,171,172,174,174,176,177,182,182,187,187,191,191,215,
		215,247,247,8214,8215,8224,8231,8240,8254,8257,8275,8277,8286,8592,9215,
		9472,10101,10132,11263,11776,11903,12289,12291,12296,12320,12336,12336,
		6,0,768,879,7616,7679,8400,8447,65024,65039,65056,65071,917760,917999,
		588,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,71,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
		1,0,0,0,0,99,1,0,0,0,1,107,1,0,0,0,3,109,1,0,0,0,5,120,1,0,0,0,7,130,1,
		0,0,0,9,141,1,0,0,0,11,155,1,0,0,0,13,160,1,0,0,0,15,166,1,0,0,0,17,171,
		1,0,0,0,19,173,1,0,0,0,21,177,1,0,0,0,23,179,1,0,0,0,25,184,1,0,0,0,27,
		190,1,0,0,0,29,206,1,0,0,0,31,213,1,0,0,0,33,216,1,0,0,0,35,222,1,0,0,
		0,37,233,1,0,0,0,39,264,1,0,0,0,41,266,1,0,0,0,43,270,1,0,0,0,45,272,1,
		0,0,0,47,300,1,0,0,0,49,302,1,0,0,0,51,309,1,0,0,0,53,314,1,0,0,0,55,354,
		1,0,0,0,57,365,1,0,0,0,59,367,1,0,0,0,61,371,1,0,0,0,63,379,1,0,0,0,65,
		382,1,0,0,0,67,391,1,0,0,0,69,407,1,0,0,0,71,409,1,0,0,0,73,430,1,0,0,
		0,75,433,1,0,0,0,77,440,1,0,0,0,79,446,1,0,0,0,81,452,1,0,0,0,83,462,1,
		0,0,0,85,468,1,0,0,0,87,477,1,0,0,0,89,491,1,0,0,0,91,519,1,0,0,0,93,521,
		1,0,0,0,95,523,1,0,0,0,97,526,1,0,0,0,99,542,1,0,0,0,101,544,1,0,0,0,103,
		548,1,0,0,0,105,552,1,0,0,0,107,108,5,44,0,0,108,2,1,0,0,0,109,110,5,104,
		0,0,110,111,5,105,0,0,111,112,5,103,0,0,112,113,5,104,0,0,113,114,5,101,
		0,0,114,115,5,114,0,0,115,116,5,84,0,0,116,117,5,104,0,0,117,118,5,97,
		0,0,118,119,5,110,0,0,119,4,1,0,0,0,120,121,5,108,0,0,121,122,5,111,0,
		0,122,123,5,119,0,0,123,124,5,101,0,0,124,125,5,114,0,0,125,126,5,84,0,
		0,126,127,5,104,0,0,127,128,5,97,0,0,128,129,5,110,0,0,129,6,1,0,0,0,130,
		131,5,97,0,0,131,132,5,115,0,0,132,133,5,115,0,0,133,134,5,105,0,0,134,
		135,5,103,0,0,135,136,5,110,0,0,136,137,5,109,0,0,137,138,5,101,0,0,138,
		139,5,110,0,0,139,140,5,116,0,0,140,8,1,0,0,0,141,142,5,97,0,0,142,143,
		5,115,0,0,143,144,5,115,0,0,144,145,5,111,0,0,145,146,5,99,0,0,146,147,
		5,105,0,0,147,148,5,97,0,0,148,149,5,116,0,0,149,150,5,105,0,0,150,151,
		5,118,0,0,151,152,5,105,0,0,152,153,5,116,0,0,153,154,5,121,0,0,154,10,
		1,0,0,0,155,156,5,108,0,0,156,157,5,101,0,0,157,158,5,102,0,0,158,159,
		5,116,0,0,159,12,1,0,0,0,160,161,5,114,0,0,161,162,5,105,0,0,162,163,5,
		103,0,0,163,164,5,104,0,0,164,165,5,116,0,0,165,14,1,0,0,0,166,167,5,110,
		0,0,167,168,5,111,0,0,168,169,5,110,0,0,169,170,5,101,0,0,170,16,1,0,0,
		0,171,172,5,45,0,0,172,18,1,0,0,0,173,174,5,118,0,0,174,175,5,97,0,0,175,
		176,5,114,0,0,176,20,1,0,0,0,177,178,5,59,0,0,178,22,1,0,0,0,179,180,5,
		102,0,0,180,181,5,117,0,0,181,182,5,110,0,0,182,183,5,99,0,0,183,24,1,
		0,0,0,184,185,5,99,0,0,185,186,5,108,0,0,186,187,5,97,0,0,187,188,5,115,
		0,0,188,189,5,115,0,0,189,26,1,0,0,0,190,191,5,112,0,0,191,192,5,114,0,
		0,192,193,5,101,0,0,193,194,5,99,0,0,194,195,5,101,0,0,195,196,5,100,0,
		0,196,197,5,101,0,0,197,198,5,110,0,0,198,199,5,99,0,0,199,200,5,101,0,
		0,200,201,5,103,0,0,201,202,5,114,0,0,202,203,5,111,0,0,203,204,5,117,
		0,0,204,205,5,112,0,0,205,28,1,0,0,0,206,207,5,58,0,0,207,30,1,0,0,0,208,
		210,5,13,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,214,5,
		10,0,0,212,214,5,13,0,0,213,209,1,0,0,0,213,212,1,0,0,0,214,32,1,0,0,0,
		215,217,7,0,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,
		1,0,0,0,219,220,1,0,0,0,220,221,6,16,0,0,221,34,1,0,0,0,222,223,5,47,0,
		0,223,224,5,47,0,0,224,228,1,0,0,0,225,227,8,1,0,0,226,225,1,0,0,0,227,
		230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,0,230,228,1,
		0,0,0,231,232,6,17,0,0,232,36,1,0,0,0,233,234,5,47,0,0,234,235,5,42,0,
		0,235,239,1,0,0,0,236,238,9,0,0,0,237,236,1,0,0,0,238,241,1,0,0,0,239,
		240,1,0,0,0,239,237,1,0,0,0,240,242,1,0,0,0,241,239,1,0,0,0,242,243,5,
		42,0,0,243,244,5,47,0,0,244,245,1,0,0,0,245,246,6,18,0,0,246,38,1,0,0,
		0,247,251,3,41,20,0,248,250,3,43,21,0,249,248,1,0,0,0,250,253,1,0,0,0,
		251,249,1,0,0,0,251,252,1,0,0,0,252,265,1,0,0,0,253,251,1,0,0,0,254,255,
		5,96,0,0,255,259,3,41,20,0,256,258,3,43,21,0,257,256,1,0,0,0,258,261,1,
		0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,259,1,0,0,0,
		262,263,5,96,0,0,263,265,1,0,0,0,264,247,1,0,0,0,264,254,1,0,0,0,265,40,
		1,0,0,0,266,267,7,2,0,0,267,42,1,0,0,0,268,271,7,3,0,0,269,271,3,41,20,
		0,270,268,1,0,0,0,270,269,1,0,0,0,271,44,1,0,0,0,272,274,5,36,0,0,273,
		275,7,4,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,
		0,0,0,277,46,1,0,0,0,278,279,5,48,0,0,279,280,5,98,0,0,280,281,1,0,0,0,
		281,285,7,5,0,0,282,284,7,6,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,
		1,0,0,0,285,286,1,0,0,0,286,301,1,0,0,0,287,285,1,0,0,0,288,289,5,48,0,
		0,289,290,5,111,0,0,290,291,1,0,0,0,291,295,7,7,0,0,292,294,7,8,0,0,293,
		292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,301,1,
		0,0,0,297,295,1,0,0,0,298,301,3,49,24,0,299,301,3,51,25,0,300,278,1,0,
		0,0,300,288,1,0,0,0,300,298,1,0,0,0,300,299,1,0,0,0,301,48,1,0,0,0,302,
		306,7,4,0,0,303,305,7,9,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,
		0,0,0,306,307,1,0,0,0,307,50,1,0,0,0,308,306,1,0,0,0,309,310,5,48,0,0,
		310,311,5,120,0,0,311,312,1,0,0,0,312,313,3,53,26,0,313,52,1,0,0,0,314,
		318,7,10,0,0,315,317,7,11,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,
		1,0,0,0,318,319,1,0,0,0,319,54,1,0,0,0,320,318,1,0,0,0,321,324,3,49,24,
		0,322,323,5,46,0,0,323,325,3,49,24,0,324,322,1,0,0,0,324,325,1,0,0,0,325,
		331,1,0,0,0,326,328,7,12,0,0,327,329,7,13,0,0,328,327,1,0,0,0,328,329,
		1,0,0,0,329,330,1,0,0,0,330,332,3,49,24,0,331,326,1,0,0,0,331,332,1,0,
		0,0,332,355,1,0,0,0,333,336,3,51,25,0,334,335,5,46,0,0,335,337,3,53,26,
		0,336,334,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,340,7,14,0,0,339,
		341,7,13,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,343,3,
		49,24,0,343,355,1,0,0,0,344,350,3,51,25,0,345,346,5,46,0,0,346,348,7,4,
		0,0,347,349,3,53,26,0,348,347,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,
		350,345,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,6,27,1,0,353,355,
		1,0,0,0,354,321,1,0,0,0,354,333,1,0,0,0,354,344,1,0,0,0,355,56,1,0,0,0,
		356,357,5,116,0,0,357,358,5,114,0,0,358,359,5,117,0,0,359,366,5,101,0,
		0,360,361,5,102,0,0,361,362,5,97,0,0,362,363,5,108,0,0,363,364,5,115,0,
		0,364,366,5,101,0,0,365,356,1,0,0,0,365,360,1,0,0,0,366,58,1,0,0,0,367,
		368,5,110,0,0,368,369,5,105,0,0,369,370,5,108,0,0,370,60,1,0,0,0,371,372,
		5,34,0,0,372,373,3,63,31,0,373,374,5,34,0,0,374,62,1,0,0,0,375,378,3,65,
		32,0,376,378,8,15,0,0,377,375,1,0,0,0,377,376,1,0,0,0,378,381,1,0,0,0,
		379,377,1,0,0,0,379,380,1,0,0,0,380,64,1,0,0,0,381,379,1,0,0,0,382,389,
		5,92,0,0,383,390,7,16,0,0,384,390,3,67,33,0,385,386,5,120,0,0,386,387,
		3,69,34,0,387,388,3,69,34,0,388,390,1,0,0,0,389,383,1,0,0,0,389,384,1,
		0,0,0,389,385,1,0,0,0,390,66,1,0,0,0,391,405,5,117,0,0,392,393,3,69,34,
		0,393,394,3,69,34,0,394,395,3,69,34,0,395,396,3,69,34,0,396,406,1,0,0,
		0,397,399,5,123,0,0,398,400,3,69,34,0,399,398,1,0,0,0,400,401,1,0,0,0,
		401,399,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,404,5,125,0,0,404,
		406,1,0,0,0,405,392,1,0,0,0,405,397,1,0,0,0,406,68,1,0,0,0,407,408,7,10,
		0,0,408,70,1,0,0,0,409,410,5,34,0,0,410,411,5,34,0,0,411,412,5,34,0,0,
		412,414,1,0,0,0,413,415,3,33,16,0,414,413,1,0,0,0,414,415,1,0,0,0,415,
		416,1,0,0,0,416,417,3,31,15,0,417,418,3,73,36,0,418,420,3,31,15,0,419,
		421,3,33,16,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,
		5,34,0,0,423,424,5,34,0,0,424,425,5,34,0,0,425,72,1,0,0,0,426,429,3,65,
		32,0,427,429,8,17,0,0,428,426,1,0,0,0,428,427,1,0,0,0,429,432,1,0,0,0,
		430,431,1,0,0,0,430,428,1,0,0,0,431,74,1,0,0,0,432,430,1,0,0,0,433,434,
		5,34,0,0,434,435,3,63,31,0,435,436,5,92,0,0,436,437,5,123,0,0,437,438,
		1,0,0,0,438,439,6,37,2,0,439,76,1,0,0,0,440,441,5,125,0,0,441,442,4,38,
		0,0,442,443,3,63,31,0,443,444,5,92,0,0,444,445,5,123,0,0,445,78,1,0,0,
		0,446,447,5,125,0,0,447,448,4,39,1,0,448,449,3,63,31,0,449,450,5,34,0,
		0,450,451,6,39,3,0,451,80,1,0,0,0,452,453,5,34,0,0,453,454,5,34,0,0,454,
		455,5,34,0,0,455,456,1,0,0,0,456,457,3,73,36,0,457,458,5,92,0,0,458,459,
		5,123,0,0,459,460,1,0,0,0,460,461,6,40,4,0,461,82,1,0,0,0,462,463,5,125,
		0,0,463,464,4,41,2,0,464,465,3,73,36,0,465,466,5,92,0,0,466,467,5,123,
		0,0,467,84,1,0,0,0,468,469,5,125,0,0,469,470,4,42,3,0,470,471,3,73,36,
		0,471,472,5,34,0,0,472,473,5,34,0,0,473,474,5,34,0,0,474,475,1,0,0,0,475,
		476,6,42,5,0,476,86,1,0,0,0,477,487,5,35,0,0,478,488,3,87,43,0,479,483,
		5,34,0,0,480,482,8,18,0,0,481,480,1,0,0,0,482,485,1,0,0,0,483,484,1,0,
		0,0,483,481,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,488,5,34,0,0,487,
		478,1,0,0,0,487,479,1,0,0,0,488,489,1,0,0,0,489,490,5,35,0,0,490,88,1,
		0,0,0,491,515,5,35,0,0,492,516,3,89,44,0,493,494,5,34,0,0,494,495,5,34,
		0,0,495,496,5,34,0,0,496,498,1,0,0,0,497,499,3,33,16,0,498,497,1,0,0,0,
		498,499,1,0,0,0,499,500,1,0,0,0,500,504,3,31,15,0,501,503,9,0,0,0,502,
		501,1,0,0,0,503,506,1,0,0,0,504,505,1,0,0,0,504,502,1,0,0,0,505,507,1,
		0,0,0,506,504,1,0,0,0,507,509,3,31,15,0,508,510,3,33,16,0,509,508,1,0,
		0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,5,34,0,0,512,513,5,34,0,0,
		513,514,5,34,0,0,514,516,1,0,0,0,515,492,1,0,0,0,515,493,1,0,0,0,516,517,
		1,0,0,0,517,518,5,35,0,0,518,90,1,0,0,0,519,520,5,40,0,0,520,92,1,0,0,
		0,521,522,5,41,0,0,522,94,1,0,0,0,523,524,5,123,0,0,524,525,6,47,6,0,525,
		96,1,0,0,0,526,527,5,125,0,0,527,528,6,48,7,0,528,98,1,0,0,0,529,533,3,
		101,50,0,530,532,3,103,51,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,1,
		0,0,0,533,534,1,0,0,0,534,543,1,0,0,0,535,533,1,0,0,0,536,538,5,46,0,0,
		537,539,3,105,52,0,538,537,1,0,0,0,539,540,1,0,0,0,540,538,1,0,0,0,540,
		541,1,0,0,0,541,543,1,0,0,0,542,529,1,0,0,0,542,536,1,0,0,0,543,100,1,
		0,0,0,544,545,7,19,0,0,545,102,1,0,0,0,546,549,3,101,50,0,547,549,7,20,
		0,0,548,546,1,0,0,0,548,547,1,0,0,0,549,104,1,0,0,0,550,553,5,46,0,0,551,
		553,3,103,51,0,552,550,1,0,0,0,552,551,1,0,0,0,553,106,1,0,0,0,45,0,209,
		213,218,228,239,251,259,264,270,276,285,295,300,306,318,324,328,331,336,
		340,348,350,354,365,377,379,389,401,405,414,420,428,430,483,487,498,504,
		509,515,533,540,542,548,552,8,6,0,0,1,27,0,1,37,1,1,39,2,1,40,3,1,42,4,
		1,47,5,1,48,6
	]

	internal
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}